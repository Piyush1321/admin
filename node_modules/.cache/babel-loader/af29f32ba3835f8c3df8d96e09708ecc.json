{"ast":null,"code":"ace.define(\"ace/mode/gherkin_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n  var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n\n  var GherkinHighlightRules = function () {\n    var languages = [{\n      name: \"en\",\n      labels: \"Feature|Background|Scenario(?: Outline)?|Examples\",\n      keywords: \"Given|When|Then|And|But\"\n    }];\n    var labels = languages.map(function (l) {\n      return l.labels;\n    }).join(\"|\");\n    var keywords = languages.map(function (l) {\n      return l.keywords;\n    }).join(\"|\");\n    this.$rules = {\n      start: [{\n        token: \"constant.numeric\",\n        regex: \"(?:(?:[1-9]\\\\d*)|(?:0))\"\n      }, {\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"keyword\",\n        regex: \"(?:\" + labels + \"):|(?:\" + keywords + \")\\\\b\"\n      }, {\n        token: \"keyword\",\n        regex: \"\\\\*\"\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string start\n        regex: '\"{3}',\n        next: \"qqstring3\"\n      }, {\n        token: \"string\",\n        // \" string\n        regex: '\"',\n        next: \"qqstring\"\n      }, {\n        token: \"text\",\n        regex: \"^\\\\s*(?=@[\\\\w])\",\n        next: [{\n          token: \"text\",\n          regex: \"\\\\s+\"\n        }, {\n          token: \"variable.parameter\",\n          regex: \"@[\\\\w]+\"\n        }, {\n          token: \"empty\",\n          regex: \"\",\n          next: \"start\"\n        }]\n      }, {\n        token: \"comment\",\n        regex: \"<[^>]+>\"\n      }, {\n        token: \"comment\",\n        regex: \"\\\\|(?=.)\",\n        next: \"table-item\"\n      }, {\n        token: \"comment\",\n        regex: \"\\\\|$\",\n        next: \"start\"\n      }],\n      \"qqstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"table-item\": [{\n        token: \"comment\",\n        regex: /$/,\n        next: \"start\"\n      }, {\n        token: \"comment\",\n        regex: /\\|/\n      }, {\n        token: \"string\",\n        regex: /\\\\./\n      }, {\n        defaultToken: \"string\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(GherkinHighlightRules, TextHighlightRules);\n  exports.GherkinHighlightRules = GherkinHighlightRules;\n});\nace.define(\"ace/mode/gherkin\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/gherkin_highlight_rules\"], function (acequire, exports, module) {\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var GherkinHighlightRules = acequire(\"./gherkin_highlight_rules\").GherkinHighlightRules;\n\n  var Mode = function () {\n    this.HighlightRules = GherkinHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/gherkin\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var space2 = \"  \";\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      console.log(state);\n\n      if (line.match(\"[ ]*\\\\|\")) {\n        indent += \"| \";\n      }\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        if (line.match(\"Scenario:|Feature:|Scenario Outline:|Background:\")) {\n          indent += space2;\n        } else if (line.match(\"(Given|Then).+(:)$|Examples:\")) {\n          indent += space2;\n        } else if (line.match(\"\\\\*.+\")) {\n          indent += \"* \";\n        }\n      }\n\n      return indent;\n    };\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});","map":{"version":3,"sources":["/Users/ishwarbaisla/Documents/GitHub/admin/node_modules/brace/mode/gherkin.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","stringEscape","GherkinHighlightRules","languages","name","labels","keywords","map","l","join","$rules","start","token","regex","next","defaultToken","normalizeRules","inherits","TextMode","Mode","HighlightRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","getNextLineIndent","state","line","tab","indent","$getIndent","space2","tokenizedLine","getTokenizer","getLineTokens","tokens","console","log","match","length","type","call","prototype"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/gherkin_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\nvar stringEscape =  \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n\nvar GherkinHighlightRules = function() {\n    var languages = [{\n        name: \"en\",\n        labels: \"Feature|Background|Scenario(?: Outline)?|Examples\",\n        keywords: \"Given|When|Then|And|But\"\n    }];\n    \n    var labels = languages.map(function(l) {\n        return l.labels;\n    }).join(\"|\");\n    var keywords = languages.map(function(l) {\n        return l.keywords;\n    }).join(\"|\");\n    this.$rules = {\n        start : [{\n            token: \"constant.numeric\",\n            regex: \"(?:(?:[1-9]\\\\d*)|(?:0))\"\n        }, {\n            token : \"comment\",\n            regex : \"#.*$\"\n        }, {\n            token : \"keyword\",\n            regex : \"(?:\" + labels + \"):|(?:\" + keywords + \")\\\\b\"\n        }, {\n            token : \"keyword\",\n            regex : \"\\\\*\"\n        }, {\n            token : \"string\",           // multi line \"\"\" string start\n            regex : '\"{3}',\n            next : \"qqstring3\"\n        }, {\n            token : \"string\",           // \" string\n            regex : '\"',\n            next : \"qqstring\"\n        }, {\n            token : \"text\",\n            regex : \"^\\\\s*(?=@[\\\\w])\",\n            next : [{\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }, {\n                token : \"variable.parameter\",\n                regex : \"@[\\\\w]+\"\n            }, {\n                token : \"empty\",\n                regex : \"\",\n                next : \"start\"\n            }]\n        }, {\n            token : \"comment\",\n            regex : \"<[^>]+>\"\n        }, {\n            token : \"comment\",\n            regex : \"\\\\|(?=.)\",\n            next : \"table-item\"\n        }, {\n            token : \"comment\",\n            regex : \"\\\\|$\",\n            next : \"start\"\n        }],\n        \"qqstring3\" : [ {\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\", // multi line \"\"\" string end\n            regex : '\"{3}',\n            next : \"start\"\n        }, {\n            defaultToken : \"string\"\n        }],\n        \"qqstring\" : [{\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\",\n            regex : \"\\\\\\\\$\",\n            next  : \"qqstring\"\n        }, {\n            token : \"string\",\n            regex : '\"|$',\n            next  : \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"table-item\" : [{\n            token : \"comment\",\n            regex : /$/,\n            next : \"start\"\n        }, {\n            token : \"comment\",\n            regex : /\\|/\n        }, {\n            token : \"string\",\n            regex : /\\\\./\n        }, {\n            defaultToken : \"string\"\n        }]\n    };\n    this.normalizeRules();\n};\n\noop.inherits(GherkinHighlightRules, TextHighlightRules);\n\nexports.GherkinHighlightRules = GherkinHighlightRules;\n});\n\nace.define(\"ace/mode/gherkin\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/gherkin_highlight_rules\"], function(acequire, exports, module) {\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar GherkinHighlightRules = acequire(\"./gherkin_highlight_rules\").GherkinHighlightRules;\n\nvar Mode = function() {\n    this.HighlightRules = GherkinHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/gherkin\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n        var space2 = \"  \";\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        \n        console.log(state);\n        \n        if(line.match(\"[ ]*\\\\|\")) {\n            indent += \"| \";\n        }\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n        \n\n        if (state == \"start\") {\n            if (line.match(\"Scenario:|Feature:|Scenario Outline:|Background:\")) {\n                indent += space2;\n            } else if(line.match(\"(Given|Then).+(:)$|Examples:\")) {\n                indent += space2;\n            } else if(line.match(\"\\\\*.+\")) {\n                indent += \"* \";\n            } \n        }\n        \n\n        return indent;\n    };\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"]},"metadata":{},"sourceType":"script"}