{"ast":null,"code":"var _jsxFileName = \"/Users/ishwarbaisla/Documents/GitHub/admin/src/components/QuestionEditor.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { createReactEditorJS } from 'react-editor-js';\nimport { useState, useEffect } from 'react';\nimport LoaderHeading from './util/LoaderHeading';\nimport { EDITOR_JS_TOOLS } from './util/tool';\nimport EditorJS from '@editorjs/editorjs';\nimport './css/QuestionEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction QuestionEditor() {\n  _s();\n\n  const [editor, setEditor] = useState();\n  useEffect(() => {\n    const jsEditor = new EditorJS({\n      holder: \"editorjs\",\n      defaultBlock: {\n        \"time\": 1550476186479,\n        \"blocks\": [{\n          \"id\": \"oUq2g_tl8y\",\n          \"type\": \"header\",\n          \"data\": {\n            \"text\": \"Editor.js\",\n            \"level\": 2\n          }\n        }, {\n          \"id\": \"zbGZFPM-iI\",\n          \"type\": \"paragraph\",\n          \"data\": {\n            \"text\": \"Hey. Meet the new Editor. On this page you can see it in action — try to edit this text. Source code of the page contains the example of connection and configuration.\"\n          }\n        }, {\n          \"id\": \"qYIGsjS5rt\",\n          \"type\": \"header\",\n          \"data\": {\n            \"text\": \"Key features\",\n            \"level\": 3\n          }\n        }, {\n          \"id\": \"XV87kJS_H1\",\n          \"type\": \"list\",\n          \"data\": {\n            \"style\": \"unordered\",\n            \"items\": [\"It is a block-styled editor\", \"It returns clean data output in JSON\", \"Designed to be extendable and pluggable with a simple API\"]\n          }\n        }, {\n          \"id\": \"AOulAjL8XM\",\n          \"type\": \"header\",\n          \"data\": {\n            \"text\": \"What does it mean «block-styled editor»\",\n            \"level\": 3\n          }\n        }, {\n          \"id\": \"cyZjplMOZ0\",\n          \"type\": \"paragraph\",\n          \"data\": {\n            \"text\": \"Workspace in classic editors is made of a single contenteditable element, used to create different HTML markups. Editor.js <mark class=\\\"cdx-marker\\\">workspace consists of separate Blocks: paragraphs, headings, images, lists, quotes, etc</mark>. Each of them is an independent contenteditable element (or more complex structure) provided by Plugin and united by Editor's Core.\"\n          }\n        }],\n        \"version\": \"2.8.1\"\n      }\n    });\n    setEditor(jsEditor);\n  }, []);\n\n  const clearEditor = () => {\n    editor.save().then(outputData => {\n      console.log('Article data: ', outputData);\n    }).catch(error => {\n      console.log('Saving failed: ', error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LoaderHeading, {\n      description: \"Question Editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-loaded\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-10\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-small\",\n            onClick: clearEditor,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-editor-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"New Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"editorjs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(QuestionEditor, \"gpwBrxDRBSsOQ97u22Joi8dKlLk=\");\n\n_c = QuestionEditor;\nexport default QuestionEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionEditor\");","map":{"version":3,"sources":["/Users/ishwarbaisla/Documents/GitHub/admin/src/components/QuestionEditor.js"],"names":["React","createReactEditorJS","useState","useEffect","LoaderHeading","EDITOR_JS_TOOLS","EditorJS","QuestionEditor","editor","setEditor","jsEditor","holder","defaultBlock","clearEditor","save","then","outputData","console","log","catch","error"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,iBAApC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,OAAO,0BAAP;;;;AAEA,SAASC,cAAT,GAA0B;AAAA;;AACtB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,EAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,QAAQ,GAAG,IAAIJ,QAAJ,CAAa;AAC3BK,MAAAA,MAAM,EAAE,UADmB;AAE3BC,MAAAA,YAAY,EAAE;AACb,gBAAQ,aADK;AAEb,kBAAU,CACN;AACI,gBAAM,YADV;AAEI,kBAAQ,QAFZ;AAGI,kBAAQ;AACJ,oBAAQ,WADJ;AAEJ,qBAAS;AAFL;AAHZ,SADM,EASN;AACI,gBAAM,YADV;AAEI,kBAAQ,WAFZ;AAGI,kBAAQ;AACJ,oBAAQ;AADJ;AAHZ,SATM,EAgBN;AACI,gBAAM,YADV;AAEI,kBAAQ,QAFZ;AAGI,kBAAQ;AACJ,oBAAQ,cADJ;AAEJ,qBAAS;AAFL;AAHZ,SAhBM,EAwBN;AACI,gBAAM,YADV;AAEI,kBAAQ,MAFZ;AAGI,kBAAQ;AACJ,qBAAS,WADL;AAEJ,qBAAS,CACL,6BADK,EAEL,sCAFK,EAGL,2DAHK;AAFL;AAHZ,SAxBM,EAoCN;AACI,gBAAM,YADV;AAEI,kBAAQ,QAFZ;AAGI,kBAAQ;AACJ,oBAAQ,yCADJ;AAEJ,qBAAS;AAFL;AAHZ,SApCM,EA4CN;AACI,gBAAM,YADV;AAEI,kBAAQ,WAFZ;AAGI,kBAAQ;AACJ,oBAAQ;AADJ;AAHZ,SA5CM,CAFG;AAsDT,mBAAW;AAtDF;AAFa,KAAb,CAAjB;AA2DAH,IAAAA,SAAS,CAACC,QAAD,CAAT;AAEH,GA9DQ,EA8DN,EA9DM,CAAT;;AA+DA,QAAMG,WAAW,GAAG,MAAM;AACtBL,IAAAA,MAAM,CAACM,IAAP,GAAcC,IAAd,CAAoBC,UAAD,IAAgB;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,UAA9B;AACD,KAFD,EAEGG,KAFH,CAEUC,KAAD,IAAW;AAClBH,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BE,KAA/B;AACD,KAJD;AAKH,GAND;;AAOA,sBACA;AAAA,4BACI,QAAC,aAAD;AACI,MAAA,WAAW,EAAC;AADhB;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACI;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,iCACI;AAAQ,YAAA,SAAS,EAAC,2BAAlB;AAA8C,YAAA,OAAO,EAAEP,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAC,2BAAf;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA,kBADA;AAkBH;;GA1FQN,c;;KAAAA,c;AA4FT,eAAeA,cAAf","sourcesContent":["import React from 'react';\nimport { createReactEditorJS } from 'react-editor-js'\nimport { useState, useEffect } from 'react';\nimport LoaderHeading from './util/LoaderHeading';\nimport { EDITOR_JS_TOOLS } from './util/tool';\nimport EditorJS from '@editorjs/editorjs';\n\nimport './css/QuestionEditor.css';\n\nfunction QuestionEditor() {\n    const [editor, setEditor] = useState();\n    useEffect(() => {\n        const jsEditor = new EditorJS({\n           holder: \"editorjs\",\n           defaultBlock: {\n            \"time\": 1550476186479,\n            \"blocks\": [\n                {\n                    \"id\": \"oUq2g_tl8y\",\n                    \"type\": \"header\",\n                    \"data\": {\n                        \"text\": \"Editor.js\",\n                        \"level\": 2\n                    }\n                },\n                {\n                    \"id\": \"zbGZFPM-iI\",\n                    \"type\": \"paragraph\",\n                    \"data\": {\n                        \"text\": \"Hey. Meet the new Editor. On this page you can see it in action — try to edit this text. Source code of the page contains the example of connection and configuration.\"\n                    }\n                },\n                {\n                    \"id\": \"qYIGsjS5rt\",\n                    \"type\": \"header\",\n                    \"data\": {\n                        \"text\": \"Key features\",\n                        \"level\": 3\n                    }\n                },\n                {\n                    \"id\": \"XV87kJS_H1\",\n                    \"type\": \"list\",\n                    \"data\": {\n                        \"style\": \"unordered\",\n                        \"items\": [\n                            \"It is a block-styled editor\",\n                            \"It returns clean data output in JSON\",\n                            \"Designed to be extendable and pluggable with a simple API\"\n                        ]\n                    }\n                },\n                {\n                    \"id\": \"AOulAjL8XM\",\n                    \"type\": \"header\",\n                    \"data\": {\n                        \"text\": \"What does it mean «block-styled editor»\",\n                        \"level\": 3\n                    }\n                },\n                {\n                    \"id\": \"cyZjplMOZ0\",\n                    \"type\": \"paragraph\",\n                    \"data\": {\n                        \"text\": \"Workspace in classic editors is made of a single contenteditable element, used to create different HTML markups. Editor.js <mark class=\\\"cdx-marker\\\">workspace consists of separate Blocks: paragraphs, headings, images, lists, quotes, etc</mark>. Each of them is an independent contenteditable element (or more complex structure) provided by Plugin and united by Editor's Core.\"\n                    }\n                }\n                ],\n                \"version\": \"2.8.1\"\n            }\n        });\n        setEditor(jsEditor);\n\n    }, []);\n    const clearEditor = () => {\n        editor.save().then((outputData) => {\n          console.log('Article data: ', outputData)\n        }).catch((error) => {\n          console.log('Saving failed: ', error)\n        });\n    }\n    return (\n    <>\n        <LoaderHeading\n            description='Question Editor'\n        />\n        <div className='content-loaded'>\n            <div>\n                <div className='mb-10'>\n                    <button className='btn btn-primary btn-small' onClick={clearEditor}>Clear</button>\n                </div>\n                <div className='question-editor-container'>\n                    <h1>New Note</h1>\n                    <div id=\"editorjs\"></div>\n                </div>\n            </div>\n        </div>\n    </>\n    );\n}\n\nexport default QuestionEditor;\n"]},"metadata":{},"sourceType":"module"}