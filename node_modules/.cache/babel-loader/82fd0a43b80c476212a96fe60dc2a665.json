{"ast":null,"code":"ace.define(\"ace/mode/lisp_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var LispHighlightRules = function () {\n    var keywordControl = \"case|do|let|loop|if|else|when\";\n    var keywordOperator = \"eq|neq|and|or\";\n    var constantLanguage = \"null|nil\";\n    var supportFunctions = \"cons|car|cdr|cond|lambda|format|setq|setf|quote|eval|append|list|listp|memberp|t|load|progn\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword.control\": keywordControl,\n      \"keyword.operator\": keywordOperator,\n      \"constant.language\": constantLanguage,\n      \"support.function\": supportFunctions\n    }, \"identifier\", true);\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \";.*$\"\n      }, {\n        token: [\"storage.type.function-type.lisp\", \"text\", \"entity.name.function.lisp\"],\n        regex: \"(?:\\\\b(?:(defun|defmethod|defmacro))\\\\b)(\\\\s+)((?:\\\\w|\\\\-|\\\\!|\\\\?)*)\"\n      }, {\n        token: [\"punctuation.definition.constant.character.lisp\", \"constant.character.lisp\"],\n        regex: \"(#)((?:\\\\w|[\\\\\\\\+-=<>'\\\"&#])+)\"\n      }, {\n        token: [\"punctuation.definition.variable.lisp\", \"variable.other.global.lisp\", \"punctuation.definition.variable.lisp\"],\n        regex: \"(\\\\*)(\\\\S*)(\\\\*)\"\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+(?:L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(?:L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"string\",\n        regex: '\"(?=.)',\n        next: \"qqstring\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.character.escape.lisp\",\n        regex: \"\\\\\\\\.\"\n      }, {\n        token: \"string\",\n        regex: '[^\"\\\\\\\\]+'\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }]\n    };\n  };\n\n  oop.inherits(LispHighlightRules, TextHighlightRules);\n  exports.LispHighlightRules = LispHighlightRules;\n});\nace.define(\"ace/mode/lisp\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/lisp_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var LispHighlightRules = acequire(\"./lisp_highlight_rules\").LispHighlightRules;\n\n  var Mode = function () {\n    this.HighlightRules = LispHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \";\";\n    this.$id = \"ace/mode/lisp\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});","map":{"version":3,"sources":["/Users/ishwarbaisla/Documents/GitHub/admin/node_modules/brace/mode/lisp.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","LispHighlightRules","keywordControl","keywordOperator","constantLanguage","supportFunctions","keywordMapper","createKeywordMapper","$rules","token","regex","next","inherits","TextMode","Mode","HighlightRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","call","prototype"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/lisp_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar LispHighlightRules = function() {\n    var keywordControl = \"case|do|let|loop|if|else|when\";\n    var keywordOperator = \"eq|neq|and|or\";\n    var constantLanguage = \"null|nil\";\n    var supportFunctions = \"cons|car|cdr|cond|lambda|format|setq|setf|quote|eval|append|list|listp|memberp|t|load|progn\";\n\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword.control\": keywordControl,\n        \"keyword.operator\": keywordOperator,\n        \"constant.language\": constantLanguage,\n        \"support.function\": supportFunctions\n    }, \"identifier\", true);\n\n    this.$rules = \n        {\n    \"start\": [\n        {\n            token : \"comment\",\n            regex : \";.*$\"\n        },\n        {\n            token: [\"storage.type.function-type.lisp\", \"text\", \"entity.name.function.lisp\"],\n            regex: \"(?:\\\\b(?:(defun|defmethod|defmacro))\\\\b)(\\\\s+)((?:\\\\w|\\\\-|\\\\!|\\\\?)*)\"\n        },\n        {\n            token: [\"punctuation.definition.constant.character.lisp\", \"constant.character.lisp\"],\n            regex: \"(#)((?:\\\\w|[\\\\\\\\+-=<>'\\\"&#])+)\"\n        },\n        {\n            token: [\"punctuation.definition.variable.lisp\", \"variable.other.global.lisp\", \"punctuation.definition.variable.lisp\"],\n            regex: \"(\\\\*)(\\\\S*)(\\\\*)\"\n        },\n        {\n            token : \"constant.numeric\", // hex\n            regex : \"0[xX][0-9a-fA-F]+(?:L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n        }, \n        {\n            token : \"constant.numeric\", // float\n            regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(?:L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n        },\n        {\n                token : keywordMapper,\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        },\n        {\n            token : \"string\",\n            regex : '\"(?=.)',\n            next  : \"qqstring\"\n        }\n    ],\n    \"qqstring\": [\n        {\n            token: \"constant.character.escape.lisp\",\n            regex: \"\\\\\\\\.\"\n        },\n        {\n            token : \"string\",\n            regex : '[^\"\\\\\\\\]+'\n        }, {\n            token : \"string\",\n            regex : \"\\\\\\\\$\",\n            next  : \"qqstring\"\n        }, {\n            token : \"string\",\n            regex : '\"|$',\n            next  : \"start\"\n        }\n    ]\n};\n\n};\n\noop.inherits(LispHighlightRules, TextHighlightRules);\n\nexports.LispHighlightRules = LispHighlightRules;\n});\n\nace.define(\"ace/mode/lisp\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/lisp_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar LispHighlightRules = acequire(\"./lisp_highlight_rules\").LispHighlightRules;\n\nvar Mode = function() {\n    this.HighlightRules = LispHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n       \n    this.lineCommentStart = \";\";\n    \n    this.$id = \"ace/mode/lisp\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"]},"metadata":{},"sourceType":"script"}