{"ast":null,"code":"ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var DocCommentHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc\",\n        caseInsensitive: true\n      }]\n    };\n  };\n\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: \"\\\\/\\\\*(?=\\\\*)\",\n      next: start\n    };\n  };\n\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/lean_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n  var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n  var leanHighlightRules = function () {\n    var keywordControls = [\"add_rewrite\", \"alias\", \"as\", \"assume\", \"attribute\", \"begin\", \"by\", \"calc\", \"calc_refl\", \"calc_subst\", \"calc_trans\", \"check\", \"classes\", \"coercions\", \"conjecture\", \"constants\", \"context\", \"corollary\", \"else\", \"end\", \"environment\", \"eval\", \"example\", \"exists\", \"exit\", \"export\", \"exposing\", \"extends\", \"fields\", \"find_decl\", \"forall\", \"from\", \"fun\", \"have\", \"help\", \"hiding\", \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instances\", \"let\", \"local\", \"match\", \"namespace\", \"notation\", \"obtain\", \"obtains\", \"omit\", \"opaque\", \"open\", \"options\", \"parameter\", \"parameters\", \"postfix\", \"precedence\", \"prefix\", \"premise\", \"premises\", \"print\", \"private\", \"proof\", \"protected\", \"qed\", \"raw\", \"renaming\", \"section\", \"set_option\", \"show\", \"tactic_hint\", \"take\", \"then\", \"universe\", \"universes\", \"using\", \"variable\", \"variables\", \"with\"].join(\"|\");\n    var nameProviders = [\"inductive\", \"structure\", \"record\", \"theorem\", \"axiom\", \"axioms\", \"lemma\", \"hypothesis\", \"definition\", \"constant\"].join(\"|\");\n    var storageType = [\"Prop\", \"Type\", \"Type'\", \"Type₊\", \"Type₁\", \"Type₂\", \"Type₃\"].join(\"|\");\n    var storageModifiers = \"\\\\[(\" + [\"abbreviations\", \"all-transparent\", \"begin-end-hints\", \"class\", \"classes\", \"coercion\", \"coercions\", \"declarations\", \"decls\", \"instance\", \"irreducible\", \"multiple-instances\", \"notation\", \"notations\", \"parsing-only\", \"persistent\", \"reduce-hints\", \"reducible\", \"tactic-hints\", \"visible\", \"wf\", \"whnf\"].join(\"|\") + \")\\\\]\";\n    var keywordOperators = [].join(\"|\");\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n      \"keyword.control\": keywordControls,\n      \"storage.type\": storageType,\n      \"keyword.operator\": keywordOperators,\n      \"variable.language\": \"sorry\"\n    }, \"identifier\");\n    var identifierRe = \"[A-Za-z_\\u03b1-\\u03ba\\u03bc-\\u03fb\\u1f00-\\u1ffe\\u2100-\\u214f][A-Za-z0-9_'\\u03b1-\\u03ba\\u03bc-\\u03fb\\u1f00-\\u1ffe\\u2070-\\u2079\\u207f-\\u2089\\u2090-\\u209c\\u2100-\\u214f]*\";\n    var operatorRe = new RegExp([\"#\", \"@\", \"->\", \"∼\", \"↔\", \"/\", \"==\", \"=\", \":=\", \"<->\", \"/\\\\\", \"\\\\/\", \"∧\", \"∨\", \"≠\", \"<\", \">\", \"≤\", \"≥\", \"¬\", \"<=\", \">=\", \"⁻¹\", \"⬝\", \"▸\", \"\\\\+\", \"\\\\*\", \"-\", \"/\", \"λ\", \"→\", \"∃\", \"∀\", \":=\"].join(\"|\"));\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        // single line comment \"--\"\n        regex: \"--.*$\"\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment\",\n        // multi line comment \"/-\"\n        regex: \"\\\\/-\",\n        next: \"comment\"\n      }, {\n        stateName: \"qqstring\",\n        token: \"string.start\",\n        regex: '\"',\n        next: [{\n          token: \"string.end\",\n          regex: '\"',\n          next: \"start\"\n        }, {\n          token: \"constant.language.escape\",\n          regex: /\\\\[n\"\\\\]/\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"keyword.control\",\n        regex: nameProviders,\n        next: [{\n          token: \"variable.language\",\n          regex: identifierRe,\n          next: \"start\"\n        }]\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n      }, {\n        token: \"storage.modifier\",\n        regex: storageModifiers\n      }, {\n        token: keywordMapper,\n        regex: identifierRe\n      }, {\n        token: \"operator\",\n        regex: operatorRe\n      }, {\n        token: \"punctuation.operator\",\n        regex: \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"comment\": [{\n        token: \"comment\",\n        regex: \"-/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n  };\n\n  oop.inherits(leanHighlightRules, TextHighlightRules);\n  exports.leanHighlightRules = leanHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var Range = acequire(\"../range\").Range;\n\n  var MatchingBraceOutdent = function () {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/lean\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/lean_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/range\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var oop = acequire(\"../lib/oop\");\n  var TextMode = acequire(\"./text\").Mode;\n  var leanHighlightRules = acequire(\"./lean_highlight_rules\").leanHighlightRules;\n  var MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\n  var Range = acequire(\"../range\").Range;\n\n  var Mode = function () {\n    this.HighlightRules = leanHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = {\n      start: \"/-\",\n      end: \"-/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      } else if (state == \"doc-start\") {\n        if (endState == \"start\") {\n          return \"\";\n        }\n\n        var match = line.match(/^\\s*(\\/?)\\*/);\n\n        if (match) {\n          if (match[1]) {\n            indent += \" \";\n          }\n\n          indent += \"- \";\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/lean\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});","map":{"version":3,"sources":["/Users/ishwarbaisla/Documents/GitHub/admin/node_modules/brace/mode/lean.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","leanHighlightRules","keywordControls","join","nameProviders","storageType","storageModifiers","keywordOperators","keywordMapper","$keywords","createKeywordMapper","identifierRe","operatorRe","RegExp","stateName","embedRules","normalizeRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","TextMode","Mode","HighlightRules","$outdent","lineCommentStart","blockComment","end","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","type","$id"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n}\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/lean_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar leanHighlightRules = function() {\n\n    var keywordControls = (\n        [ \"add_rewrite\", \"alias\", \"as\", \"assume\", \"attribute\",\n          \"begin\", \"by\", \"calc\", \"calc_refl\", \"calc_subst\", \"calc_trans\", \"check\",\n          \"classes\", \"coercions\", \"conjecture\", \"constants\", \"context\",\n          \"corollary\", \"else\", \"end\", \"environment\", \"eval\", \"example\",\n          \"exists\", \"exit\", \"export\", \"exposing\", \"extends\", \"fields\", \"find_decl\",\n          \"forall\", \"from\", \"fun\", \"have\", \"help\", \"hiding\", \"if\",\n          \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instances\",\n          \"let\", \"local\", \"match\", \"namespace\", \"notation\", \"obtain\", \"obtains\",\n          \"omit\", \"opaque\", \"open\", \"options\", \"parameter\", \"parameters\", \"postfix\",\n          \"precedence\", \"prefix\", \"premise\", \"premises\", \"print\", \"private\", \"proof\",\n          \"protected\", \"qed\", \"raw\", \"renaming\", \"section\", \"set_option\",\n          \"show\", \"tactic_hint\", \"take\", \"then\", \"universe\",\n          \"universes\", \"using\", \"variable\", \"variables\", \"with\"].join(\"|\")\n    );\n\n    var nameProviders = (\n        [\"inductive\", \"structure\", \"record\", \"theorem\", \"axiom\",\n         \"axioms\", \"lemma\", \"hypothesis\", \"definition\", \"constant\"].join(\"|\")\n    );\n\n    var storageType = (\n        [\"Prop\", \"Type\", \"Type'\", \"Type₊\", \"Type₁\", \"Type₂\", \"Type₃\"].join(\"|\")\n    );\n\n    var storageModifiers = (\n        \"\\\\[(\" +\n            [\"abbreviations\", \"all-transparent\", \"begin-end-hints\", \"class\", \"classes\", \"coercion\",\n             \"coercions\", \"declarations\", \"decls\", \"instance\", \"irreducible\",\n             \"multiple-instances\", \"notation\", \"notations\", \"parsing-only\", \"persistent\",\n             \"reduce-hints\", \"reducible\", \"tactic-hints\", \"visible\", \"wf\", \"whnf\"\n            ].join(\"|\") +\n            \")\\\\]\"\n    );\n\n    var keywordOperators = (\n        [].join(\"|\")\n    );\n\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n        \"keyword.control\" : keywordControls,\n        \"storage.type\" : storageType,\n        \"keyword.operator\" : keywordOperators,\n        \"variable.language\": \"sorry\"\n    }, \"identifier\");\n\n    var identifierRe = \"[A-Za-z_\\u03b1-\\u03ba\\u03bc-\\u03fb\\u1f00-\\u1ffe\\u2100-\\u214f][A-Za-z0-9_'\\u03b1-\\u03ba\\u03bc-\\u03fb\\u1f00-\\u1ffe\\u2070-\\u2079\\u207f-\\u2089\\u2090-\\u209c\\u2100-\\u214f]*\";\n    var operatorRe = new RegExp([\"#\", \"@\", \"->\", \"∼\", \"↔\", \"/\", \"==\", \"=\", \":=\", \"<->\",\n                                 \"/\\\\\", \"\\\\/\", \"∧\", \"∨\", \"≠\", \"<\", \">\", \"≤\", \"≥\", \"¬\",\n                                 \"<=\", \">=\", \"⁻¹\", \"⬝\", \"▸\", \"\\\\+\", \"\\\\*\", \"-\", \"/\",\n                                 \"λ\", \"→\", \"∃\", \"∀\", \":=\"].join(\"|\"));\n\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\", // single line comment \"--\"\n                regex : \"--.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi line comment \"/-\"\n                regex : \"\\\\/-\",\n                next : \"comment\"\n            }, {\n                stateName: \"qqstring\",\n                token : \"string.start\", regex : '\"', next : [\n                    {token : \"string.end\", regex : '\"', next : \"start\"},\n                    {token : \"constant.language.escape\", regex : /\\\\[n\"\\\\]/},\n                    {defaultToken: \"string\"}\n                ]\n            }, {\n                token : \"keyword.control\", regex : nameProviders, next : [\n                    {token : \"variable.language\", regex : identifierRe, next : \"start\"} ]\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n            }, {\n                token : \"storage.modifier\",\n                regex : storageModifiers\n            }, {\n                token : keywordMapper,\n                regex : identifierRe\n            }, {\n                token : \"operator\",\n                regex : operatorRe\n            }, {\n              token : \"punctuation.operator\",\n              regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"comment\" : [ {token: \"comment\", regex: \"-/\", next: \"start\"},\n                      {defaultToken: \"comment\"} ]\n    };\n\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n    this.normalizeRules();\n};\n\noop.inherits(leanHighlightRules, TextHighlightRules);\n\nexports.leanHighlightRules = leanHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/lean\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/lean_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar leanHighlightRules = acequire(\"./lean_highlight_rules\").leanHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar Range = acequire(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = leanHighlightRules;\n\n    this.$outdent = new MatchingBraceOutdent();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"--\";\n    this.blockComment = {start: \"/-\", end: \"-/\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        var endState = tokenizedLine.state;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        } else if (state == \"doc-start\") {\n            if (endState == \"start\") {\n                return \"\";\n            }\n            var match = line.match(/^\\s*(\\/?)\\*/);\n            if (match) {\n                if (match[1]) {\n                    indent += \" \";\n                }\n                indent += \"- \";\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/lean\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"]},"metadata":{},"sourceType":"script"}